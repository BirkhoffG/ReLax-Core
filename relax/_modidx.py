# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/ReLax-Core',
                'doc_host': 'https://birkhoffg.github.io',
                'git_url': 'https://github.com/birkhoffg/ReLax-Core',
                'lib_path': 'relax'},
  'syms': { 'relax.base': { 'relax.base.BaseConfig': ('base.html#baseconfig', 'relax/base.py'),
                            'relax.base.BaseConfig.load_from_json': ('base.html#baseconfig.load_from_json', 'relax/base.py'),
                            'relax.base.BaseConfig.save': ('base.html#baseconfig.save', 'relax/base.py'),
                            'relax.base.BaseModule': ('base.html#basemodule', 'relax/base.py'),
                            'relax.base.BaseModule.__init__': ('base.html#basemodule.__init__', 'relax/base.py'),
                            'relax.base.BaseModule.load_from_path': ('base.html#basemodule.load_from_path', 'relax/base.py'),
                            'relax.base.BaseModule.name': ('base.html#basemodule.name', 'relax/base.py'),
                            'relax.base.BaseModule.save': ('base.html#basemodule.save', 'relax/base.py'),
                            'relax.base.PredFnMixedin': ('base.html#predfnmixedin', 'relax/base.py'),
                            'relax.base.PredFnMixedin.pred_fn': ('base.html#predfnmixedin.pred_fn', 'relax/base.py'),
                            'relax.base.TrainableMixedin': ('base.html#trainablemixedin', 'relax/base.py'),
                            'relax.base.TrainableMixedin.is_trained': ('base.html#trainablemixedin.is_trained', 'relax/base.py'),
                            'relax.base.TrainableMixedin.train': ('base.html#trainablemixedin.train', 'relax/base.py')},
            'relax.data_module': { 'relax.data_module.BaseDataModule': ('data.html#basedatamodule', 'relax/data_module.py'),
                                   'relax.data_module.BaseDataModule.apply_constraints': ( 'data.html#basedatamodule.apply_constraints',
                                                                                           'relax/data_module.py'),
                                   'relax.data_module.BaseDataModule.compute_reg_loss': ( 'data.html#basedatamodule.compute_reg_loss',
                                                                                          'relax/data_module.py'),
                                   'relax.data_module.BaseDataModule.prepare': ('data.html#basedatamodule.prepare', 'relax/data_module.py'),
                                   'relax.data_module.DataModule': ('data.html#datamodule', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.__getitem__': ('data.html#datamodule.__getitem__', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.__init__': ('data.html#datamodule.__init__', 'relax/data_module.py'),
                                   'relax.data_module.DataModule._get_data': ('data.html#datamodule._get_data', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.apply_constraints': ( 'data.html#datamodule.apply_constraints',
                                                                                       'relax/data_module.py'),
                                   'relax.data_module.DataModule.compute_reg_loss': ( 'data.html#datamodule.compute_reg_loss',
                                                                                      'relax/data_module.py'),
                                   'relax.data_module.DataModule.convert_to_features': ( 'data.html#datamodule.convert_to_features',
                                                                                         'relax/data_module.py'),
                                   'relax.data_module.DataModule.convert_to_label': ( 'data.html#datamodule.convert_to_label',
                                                                                      'relax/data_module.py'),
                                   'relax.data_module.DataModule.data': ('data.html#datamodule.data', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.dataset': ('data.html#datamodule.dataset', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.features': ('data.html#datamodule.features', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.inverse_transform': ( 'data.html#datamodule.inverse_transform',
                                                                                       'relax/data_module.py'),
                                   'relax.data_module.DataModule.label': ('data.html#datamodule.label', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.load_from_path': ( 'data.html#datamodule.load_from_path',
                                                                                    'relax/data_module.py'),
                                   'relax.data_module.DataModule.prepare': ('data.html#datamodule.prepare', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.sample': ('data.html#datamodule.sample', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.save': ('data.html#datamodule.save', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.test_indices': ( 'data.html#datamodule.test_indices',
                                                                                  'relax/data_module.py'),
                                   'relax.data_module.DataModule.train_indices': ( 'data.html#datamodule.train_indices',
                                                                                   'relax/data_module.py'),
                                   'relax.data_module.DataModule.transform': ('data.html#datamodule.transform', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.xs': ('data.html#datamodule.xs', 'relax/data_module.py'),
                                   'relax.data_module.DataModule.ys': ('data.html#datamodule.ys', 'relax/data_module.py'),
                                   'relax.data_module.DataModuleConfig': ('data.html#datamoduleconfig', 'relax/data_module.py'),
                                   'relax.data_module.DataModuleConfig.shuffle': ( 'data.html#datamoduleconfig.shuffle',
                                                                                   'relax/data_module.py'),
                                   'relax.data_module._validate_dataname': ('data.html#_validate_dataname', 'relax/data_module.py'),
                                   'relax.data_module.download_data_module_files': ( 'data.html#download_data_module_files',
                                                                                     'relax/data_module.py'),
                                   'relax.data_module.load_data': ('data.html#load_data', 'relax/data_module.py')},
            'relax.data_utils': { 'relax.data_utils.DataPreprocessor': ('data.utils.html#datapreprocessor', 'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.__init__': ( 'data.utils.html#datapreprocessor.__init__',
                                                                                  'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.fit': ('data.utils.html#datapreprocessor.fit', 'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.fit_transform': ( 'data.utils.html#datapreprocessor.fit_transform',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.from_dict': ( 'data.utils.html#datapreprocessor.from_dict',
                                                                                   'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.inverse_transform': ( 'data.utils.html#datapreprocessor.inverse_transform',
                                                                                           'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.to_dict': ( 'data.utils.html#datapreprocessor.to_dict',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.DataPreprocessor.transform': ( 'data.utils.html#datapreprocessor.transform',
                                                                                   'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor': ('data.utils.html#encoderpreprocessor', 'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor._fit': ( 'data.utils.html#encoderpreprocessor._fit',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor._inverse_transform': ( 'data.utils.html#encoderpreprocessor._inverse_transform',
                                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor._transform': ( 'data.utils.html#encoderpreprocessor._transform',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor.from_dict': ( 'data.utils.html#encoderpreprocessor.from_dict',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.EncoderPreprocessor.to_dict': ( 'data.utils.html#encoderpreprocessor.to_dict',
                                                                                    'relax/data_utils.py'),
                                  'relax.data_utils.Feature': ('data.utils.html#feature', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.__get_item__': ('data.utils.html#feature.__get_item__', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.__init__': ('data.utils.html#feature.__init__', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.__repr__': ('data.utils.html#feature.__repr__', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.apply_constraints': ( 'data.utils.html#feature.apply_constraints',
                                                                                  'relax/data_utils.py'),
                                  'relax.data_utils.Feature.compute_reg_loss': ( 'data.utils.html#feature.compute_reg_loss',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.fit': ('data.utils.html#feature.fit', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.fit_transform': ( 'data.utils.html#feature.fit_transform',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.Feature.from_dict': ('data.utils.html#feature.from_dict', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.inverse_transform': ( 'data.utils.html#feature.inverse_transform',
                                                                                  'relax/data_utils.py'),
                                  'relax.data_utils.Feature.is_categorical': ( 'data.utils.html#feature.is_categorical',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.Feature.to_dict': ('data.utils.html#feature.to_dict', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.transform': ('data.utils.html#feature.transform', 'relax/data_utils.py'),
                                  'relax.data_utils.Feature.transformed_data': ( 'data.utils.html#feature.transformed_data',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList': ('data.utils.html#featureslist', 'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.__init__': ( 'data.utils.html#featureslist.__init__',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.__iter__': ( 'data.utils.html#featureslist.__iter__',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.__len__': ('data.utils.html#featureslist.__len__', 'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.__next__': ( 'data.utils.html#featureslist.__next__',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList._transform_data': ( 'data.utils.html#featureslist._transform_data',
                                                                                     'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.apply_constraints': ( 'data.utils.html#featureslist.apply_constraints',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.compute_reg_loss': ( 'data.utils.html#featureslist.compute_reg_loss',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.feature_indices': ( 'data.utils.html#featureslist.feature_indices',
                                                                                     'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.feature_name_indices': ( 'data.utils.html#featureslist.feature_name_indices',
                                                                                          'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.features': ( 'data.utils.html#featureslist.features',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.from_dict': ( 'data.utils.html#featureslist.from_dict',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.inverse_transform': ( 'data.utils.html#featureslist.inverse_transform',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.load_from_path': ( 'data.utils.html#featureslist.load_from_path',
                                                                                    'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.save': ('data.utils.html#featureslist.save', 'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.to_dict': ('data.utils.html#featureslist.to_dict', 'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.transform': ( 'data.utils.html#featureslist.transform',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.FeaturesList.transformed_data': ( 'data.utils.html#featureslist.transformed_data',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation': ( 'data.utils.html#identitytransformation',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.__init__': ( 'data.utils.html#identitytransformation.__init__',
                                                                                        'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.apply_constraints': ( 'data.utils.html#identitytransformation.apply_constraints',
                                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.fit': ( 'data.utils.html#identitytransformation.fit',
                                                                                   'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.fit_transform': ( 'data.utils.html#identitytransformation.fit_transform',
                                                                                             'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.from_dict': ( 'data.utils.html#identitytransformation.from_dict',
                                                                                         'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.to_dict': ( 'data.utils.html#identitytransformation.to_dict',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.IdentityTransformation.transform': ( 'data.utils.html#identitytransformation.transform',
                                                                                         'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler': ('data.utils.html#minmaxscaler', 'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.__init__': ( 'data.utils.html#minmaxscaler.__init__',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.fit': ('data.utils.html#minmaxscaler.fit', 'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.from_dict': ( 'data.utils.html#minmaxscaler.from_dict',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.inverse_transform': ( 'data.utils.html#minmaxscaler.inverse_transform',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.to_dict': ('data.utils.html#minmaxscaler.to_dict', 'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxScaler.transform': ( 'data.utils.html#minmaxscaler.transform',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxTransformation': ('data.utils.html#minmaxtransformation', 'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxTransformation.__init__': ( 'data.utils.html#minmaxtransformation.__init__',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.MinMaxTransformation.apply_constraints': ( 'data.utils.html#minmaxtransformation.apply_constraints',
                                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.OneHotEncoder': ('data.utils.html#onehotencoder', 'relax/data_utils.py'),
                                  'relax.data_utils.OneHotEncoder.fit': ('data.utils.html#onehotencoder.fit', 'relax/data_utils.py'),
                                  'relax.data_utils.OneHotEncoder.inverse_transform': ( 'data.utils.html#onehotencoder.inverse_transform',
                                                                                        'relax/data_utils.py'),
                                  'relax.data_utils.OneHotEncoder.transform': ( 'data.utils.html#onehotencoder.transform',
                                                                                'relax/data_utils.py'),
                                  'relax.data_utils.OneHotTransformation': ('data.utils.html#onehottransformation', 'relax/data_utils.py'),
                                  'relax.data_utils.OneHotTransformation.__init__': ( 'data.utils.html#onehottransformation.__init__',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.OneHotTransformation.apply_constraints': ( 'data.utils.html#onehottransformation.apply_constraints',
                                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.OneHotTransformation.compute_reg_loss': ( 'data.utils.html#onehottransformation.compute_reg_loss',
                                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.OneHotTransformation.num_categories': ( 'data.utils.html#onehottransformation.num_categories',
                                                                                            'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalPreprocessor': ('data.utils.html#ordinalpreprocessor', 'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalPreprocessor.fit': ( 'data.utils.html#ordinalpreprocessor.fit',
                                                                                'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalPreprocessor.inverse_transform': ( 'data.utils.html#ordinalpreprocessor.inverse_transform',
                                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalPreprocessor.transform': ( 'data.utils.html#ordinalpreprocessor.transform',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalTransformation': ( 'data.utils.html#ordinaltransformation',
                                                                              'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalTransformation.__init__': ( 'data.utils.html#ordinaltransformation.__init__',
                                                                                       'relax/data_utils.py'),
                                  'relax.data_utils.OrdinalTransformation.num_categories': ( 'data.utils.html#ordinaltransformation.num_categories',
                                                                                             'relax/data_utils.py'),
                                  'relax.data_utils.Transformation': ('data.utils.html#transformation', 'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.__init__': ( 'data.utils.html#transformation.__init__',
                                                                                'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.apply_constraints': ( 'data.utils.html#transformation.apply_constraints',
                                                                                         'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.compute_reg_loss': ( 'data.utils.html#transformation.compute_reg_loss',
                                                                                        'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.fit': ('data.utils.html#transformation.fit', 'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.fit_transform': ( 'data.utils.html#transformation.fit_transform',
                                                                                     'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.from_dict': ( 'data.utils.html#transformation.from_dict',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.inverse_transform': ( 'data.utils.html#transformation.inverse_transform',
                                                                                         'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.is_categorical': ( 'data.utils.html#transformation.is_categorical',
                                                                                      'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.to_dict': ( 'data.utils.html#transformation.to_dict',
                                                                               'relax/data_utils.py'),
                                  'relax.data_utils.Transformation.transform': ( 'data.utils.html#transformation.transform',
                                                                                 'relax/data_utils.py'),
                                  'relax.data_utils._check_xs': ('data.utils.html#_check_xs', 'relax/data_utils.py'),
                                  'relax.data_utils._unique': ('data.utils.html#_unique', 'relax/data_utils.py')},
            'relax.docs': { 'relax.docs.CustomizedMarkdownRenderer': ('docs.html#customizedmarkdownrenderer', 'relax/docs.py'),
                            'relax.docs.CustomizedMarkdownRenderer.__init__': ( 'docs.html#customizedmarkdownrenderer.__init__',
                                                                                'relax/docs.py'),
                            'relax.docs.CustomizedMarkdownRenderer._check_sym': ( 'docs.html#customizedmarkdownrenderer._check_sym',
                                                                                  'relax/docs.py'),
                            'relax.docs.CustomizedMarkdownRenderer._repr_markdown_': ( 'docs.html#customizedmarkdownrenderer._repr_markdown_',
                                                                                       'relax/docs.py'),
                            'relax.docs.CustomizedMarkdownRenderer.hook_methods': ( 'docs.html#customizedmarkdownrenderer.hook_methods',
                                                                                    'relax/docs.py'),
                            'relax.docs.ListDocment': ('docs.html#listdocment', 'relax/docs.py'),
                            'relax.docs.ListDocment.__init__': ('docs.html#listdocment.__init__', 'relax/docs.py'),
                            'relax.docs.ListDocment._repre_mardown': ('docs.html#listdocment._repre_mardown', 'relax/docs.py'),
                            'relax.docs.ParserMarkdownRenderer': ('docs.html#parsermarkdownrenderer', 'relax/docs.py'),
                            'relax.docs.ParserMarkdownRenderer.__init__': ('docs.html#parsermarkdownrenderer.__init__', 'relax/docs.py'),
                            'relax.docs._bold': ('docs.html#_bold', 'relax/docs.py'),
                            'relax.docs._docment_parser': ('docs.html#_docment_parser', 'relax/docs.py'),
                            'relax.docs._fmt_sig': ('docs.html#_fmt_sig', 'relax/docs.py'),
                            'relax.docs._inner_list2mdlist': ('docs.html#_inner_list2mdlist', 'relax/docs.py'),
                            'relax.docs._italic': ('docs.html#_italic', 'relax/docs.py'),
                            'relax.docs._params_mdlist': ('docs.html#_params_mdlist', 'relax/docs.py'),
                            'relax.docs._repr_markdown': ('docs.html#_repr_markdown', 'relax/docs.py'),
                            'relax.docs._return_mdlist': ('docs.html#_return_mdlist', 'relax/docs.py'),
                            'relax.docs._show_param': ('docs.html#_show_param', 'relax/docs.py'),
                            'relax.docs._show_params_return': ('docs.html#_show_params_return', 'relax/docs.py')},
            'relax.evaluate': { 'relax.evaluate.BaseEvalMetrics': ('evaluate.html#baseevalmetrics', 'relax/evaluate.py'),
                                'relax.evaluate.BaseEvalMetrics.__call__': ('evaluate.html#baseevalmetrics.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.BaseEvalMetrics.__init__': ('evaluate.html#baseevalmetrics.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.BaseEvalMetrics.__str__': ('evaluate.html#baseevalmetrics.__str__', 'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist': ('evaluate.html#manifolddist', 'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist.__call__': ('evaluate.html#manifolddist.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist.__init__': ('evaluate.html#manifolddist.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.PredictiveAccuracy': ('evaluate.html#predictiveaccuracy', 'relax/evaluate.py'),
                                'relax.evaluate.PredictiveAccuracy.__call__': ( 'evaluate.html#predictiveaccuracy.__call__',
                                                                                'relax/evaluate.py'),
                                'relax.evaluate.PredictiveAccuracy.__init__': ( 'evaluate.html#predictiveaccuracy.__init__',
                                                                                'relax/evaluate.py'),
                                'relax.evaluate.Proximity': ('evaluate.html#proximity', 'relax/evaluate.py'),
                                'relax.evaluate.Proximity.__call__': ('evaluate.html#proximity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Proximity.__init__': ('evaluate.html#proximity.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.Runtime': ('evaluate.html#runtime', 'relax/evaluate.py'),
                                'relax.evaluate.Runtime.__call__': ('evaluate.html#runtime.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Runtime.__init__': ('evaluate.html#runtime.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.Sparsity': ('evaluate.html#sparsity', 'relax/evaluate.py'),
                                'relax.evaluate.Sparsity.__call__': ('evaluate.html#sparsity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Sparsity.__init__': ('evaluate.html#sparsity.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.Validity': ('evaluate.html#validity', 'relax/evaluate.py'),
                                'relax.evaluate.Validity.__call__': ('evaluate.html#validity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Validity.__init__': ('evaluate.html#validity.__init__', 'relax/evaluate.py'),
                                'relax.evaluate._get_metric': ('evaluate.html#_get_metric', 'relax/evaluate.py'),
                                'relax.evaluate.benchmark_cfs': ('evaluate.html#benchmark_cfs', 'relax/evaluate.py'),
                                'relax.evaluate.compute_proximity': ('evaluate.html#compute_proximity', 'relax/evaluate.py'),
                                'relax.evaluate.compute_sparsity': ('evaluate.html#compute_sparsity', 'relax/evaluate.py'),
                                'relax.evaluate.compute_validity': ('evaluate.html#compute_validity', 'relax/evaluate.py'),
                                'relax.evaluate.evaluate_cfs': ('evaluate.html#evaluate_cfs', 'relax/evaluate.py'),
                                'relax.evaluate.l2_ann': ('evaluate.html#l2_ann', 'relax/evaluate.py'),
                                'relax.evaluate.pairwise_distances': ('evaluate.html#pairwise_distances', 'relax/evaluate.py')},
            'relax.explain': { 'relax.explain.Explanation': ('explain.html#explanation', 'relax/explain.py'),
                               'relax.explain.Explanation.__init__': ('explain.html#explanation.__init__', 'relax/explain.py'),
                               'relax.explain.Explanation.__repr__': ('explain.html#explanation.__repr__', 'relax/explain.py'),
                               'relax.explain.Explanation.apply_constraints': ( 'explain.html#explanation.apply_constraints',
                                                                                'relax/explain.py'),
                               'relax.explain.Explanation.cfs': ('explain.html#explanation.cfs', 'relax/explain.py'),
                               'relax.explain.Explanation.compute_reg_loss': ( 'explain.html#explanation.compute_reg_loss',
                                                                               'relax/explain.py'),
                               'relax.explain.Explanation.data': ('explain.html#explanation.data', 'relax/explain.py'),
                               'relax.explain.Explanation.data_name': ('explain.html#explanation.data_name', 'relax/explain.py'),
                               'relax.explain.Explanation.test_indices': ('explain.html#explanation.test_indices', 'relax/explain.py'),
                               'relax.explain.Explanation.train_indices': ('explain.html#explanation.train_indices', 'relax/explain.py'),
                               'relax.explain.Explanation.xs': ('explain.html#explanation.xs', 'relax/explain.py'),
                               'relax.explain.Explanation.ys': ('explain.html#explanation.ys', 'relax/explain.py'),
                               'relax.explain.fake_explanation': ('explain.html#fake_explanation', 'relax/explain.py'),
                               'relax.explain.generate_cf_explanations': ('explain.html#generate_cf_explanations', 'relax/explain.py'),
                               'relax.explain.prepare_cf_module': ('explain.html#prepare_cf_module', 'relax/explain.py'),
                               'relax.explain.prepare_pred_fn': ('explain.html#prepare_pred_fn', 'relax/explain.py')},
            'relax.import_essentials': {},
            'relax.methods.base': { 'relax.methods.base.CFModule': ('methods/base.html#cfmodule', 'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.__init__': ( 'methods/base.html#cfmodule.__init__',
                                                                              'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.apply_constraints': ( 'methods/base.html#cfmodule.apply_constraints',
                                                                                       'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.before_generate_cf': ( 'methods/base.html#cfmodule.before_generate_cf',
                                                                                        'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.compute_reg_loss': ( 'methods/base.html#cfmodule.compute_reg_loss',
                                                                                      'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.generate_cf': ( 'methods/base.html#cfmodule.generate_cf',
                                                                                 'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.init_fns': ( 'methods/base.html#cfmodule.init_fns',
                                                                              'relax/methods/base.py'),
                                    'relax.methods.base.CFModule.set_data_module': ( 'methods/base.html#cfmodule.set_data_module',
                                                                                     'relax/methods/base.py'),
                                    'relax.methods.base.ParametricCFModule': ( 'methods/base.html#parametriccfmodule',
                                                                               'relax/methods/base.py'),
                                    'relax.methods.base.default_apply_constraints_fn': ( 'methods/base.html#default_apply_constraints_fn',
                                                                                         'relax/methods/base.py'),
                                    'relax.methods.base.default_compute_reg_loss_fn': ( 'methods/base.html#default_compute_reg_loss_fn',
                                                                                        'relax/methods/base.py')},
            'relax.methods.cchvae': { 'relax.methods.cchvae.CCHVAE': ('methods/cchvae.html#cchvae', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CCHVAE.__init__': ( 'methods/cchvae.html#cchvae.__init__',
                                                                                'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CCHVAE._init_model': ( 'methods/cchvae.html#cchvae._init_model',
                                                                                   'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CCHVAE.generate_cf': ( 'methods/cchvae.html#cchvae.generate_cf',
                                                                                   'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CCHVAE.train': ('methods/cchvae.html#cchvae.train', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CCHVAEConfig': ('methods/cchvae.html#cchvaeconfig', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE': ('methods/cchvae.html#chvae', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.__init__': ( 'methods/cchvae.html#chvae.__init__',
                                                                               'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.build': ('methods/cchvae.html#chvae.build', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.call': ('methods/cchvae.html#chvae.call', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.compute_kl_loss': ( 'methods/cchvae.html#chvae.compute_kl_loss',
                                                                                      'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.decode': ('methods/cchvae.html#chvae.decode', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.encode': ('methods/cchvae.html#chvae.encode', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.forward': ( 'methods/cchvae.html#chvae.forward',
                                                                              'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.regenerate': ( 'methods/cchvae.html#chvae.regenerate',
                                                                                 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.reparameterize': ( 'methods/cchvae.html#chvae.reparameterize',
                                                                                     'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae.CHVAE.set_apply_constraints_fn': ( 'methods/cchvae.html#chvae.set_apply_constraints_fn',
                                                                                               'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae._cchvae': ('methods/cchvae.html#_cchvae', 'relax/methods/cchvae.py'),
                                      'relax.methods.cchvae._hyper_sphere_coordindates': ( 'methods/cchvae.html#_hyper_sphere_coordindates',
                                                                                           'relax/methods/cchvae.py')},
            'relax.methods.counternet': { 'relax.methods.counternet.CounterNet': ( 'methods/counternet.html#counternet',
                                                                                   'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.__init__': ( 'methods/counternet.html#counternet.__init__',
                                                                                            'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet._is_module_trained': ( 'methods/counternet.html#counternet._is_module_trained',
                                                                                                      'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.generate_cf': ( 'methods/counternet.html#counternet.generate_cf',
                                                                                               'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.generate_cfs': ( 'methods/counternet.html#counternet.generate_cfs',
                                                                                                'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.pred_fn': ( 'methods/counternet.html#counternet.pred_fn',
                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.train': ( 'methods/counternet.html#counternet.train',
                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetConfig': ( 'methods/counternet.html#counternetconfig',
                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetConfigs': ( 'methods/counternet.html#counternetconfigs',
                                                                                          'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel': ( 'methods/counternet.html#counternetmodel',
                                                                                        'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.__init__': ( 'methods/counternet.html#counternetmodel.__init__',
                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.build': ( 'methods/counternet.html#counternetmodel.build',
                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.call': ( 'methods/counternet.html#counternetmodel.call',
                                                                                             'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.exp_loss_fn': ( 'methods/counternet.html#counternetmodel.exp_loss_fn',
                                                                                                    'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.forward': ( 'methods/counternet.html#counternetmodel.forward',
                                                                                                'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.pred_loss_fn': ( 'methods/counternet.html#counternetmodel.pred_loss_fn',
                                                                                                     'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.train_step': ( 'methods/counternet.html#counternetmodel.train_step',
                                                                                                   'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule': ( 'methods/counternet.html#counternettrainingmodule',
                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.__init__': ( 'methods/counternet.html#counternettrainingmodule.__init__',
                                                                                                          'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._explainer_step': ( 'methods/counternet.html#counternettrainingmodule._explainer_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._predictor_step': ( 'methods/counternet.html#counternettrainingmodule._predictor_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._training_step': ( 'methods/counternet.html#counternettrainingmodule._training_step',
                                                                                                                'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._training_step_logs': ( 'methods/counternet.html#counternettrainingmodule._training_step_logs',
                                                                                                                     'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.exp_loss_fn': ( 'methods/counternet.html#counternettrainingmodule.exp_loss_fn',
                                                                                                             'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.forward': ( 'methods/counternet.html#counternettrainingmodule.forward',
                                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.generate_cfs': ( 'methods/counternet.html#counternettrainingmodule.generate_cfs',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.init_net_opt': ( 'methods/counternet.html#counternettrainingmodule.init_net_opt',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_1': ( 'methods/counternet.html#counternettrainingmodule.loss_fn_1',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_2': ( 'methods/counternet.html#counternettrainingmodule.loss_fn_2',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_3': ( 'methods/counternet.html#counternettrainingmodule.loss_fn_3',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.pred_loss_fn': ( 'methods/counternet.html#counternettrainingmodule.pred_loss_fn',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.predict': ( 'methods/counternet.html#counternettrainingmodule.predict',
                                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.training_step': ( 'methods/counternet.html#counternettrainingmodule.training_step',
                                                                                                               'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.validation_step': ( 'methods/counternet.html#counternettrainingmodule.validation_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModuleConfigs': ( 'methods/counternet.html#counternettrainingmoduleconfigs',
                                                                                                        'relax/methods/counternet.py'),
                                          'relax.methods.counternet.partition_trainable_params': ( 'methods/counternet.html#partition_trainable_params',
                                                                                                   'relax/methods/counternet.py'),
                                          'relax.methods.counternet.project_immutable_features': ( 'methods/counternet.html#project_immutable_features',
                                                                                                   'relax/methods/counternet.py')},
            'relax.methods.dice': { 'relax.methods.dice.DiverseCF': ('methods/dice.html#diversecf', 'relax/methods/dice.py'),
                                    'relax.methods.dice.DiverseCF.__init__': ( 'methods/dice.html#diversecf.__init__',
                                                                               'relax/methods/dice.py'),
                                    'relax.methods.dice.DiverseCF.generate_cf': ( 'methods/dice.html#diversecf.generate_cf',
                                                                                  'relax/methods/dice.py'),
                                    'relax.methods.dice.DiverseCFConfig': ('methods/dice.html#diversecfconfig', 'relax/methods/dice.py'),
                                    'relax.methods.dice._diverse_cf': ('methods/dice.html#_diverse_cf', 'relax/methods/dice.py'),
                                    'relax.methods.dice.dpp_style_vmap': ('methods/dice.html#dpp_style_vmap', 'relax/methods/dice.py')},
            'relax.methods.proto': { 'relax.methods.proto.ProtoCF': ('methods/proto.html#protocf', 'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.__init__': ( 'methods/proto.html#protocf.__init__',
                                                                               'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF._init_model': ( 'methods/proto.html#protocf._init_model',
                                                                                  'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.generate_cf': ( 'methods/proto.html#protocf.generate_cf',
                                                                                  'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.train': ('methods/proto.html#protocf.train', 'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCFConfig': ('methods/proto.html#protocfconfig', 'relax/methods/proto.py'),
                                     'relax.methods.proto._proto_cf': ('methods/proto.html#_proto_cf', 'relax/methods/proto.py')},
            'relax.methods.sphere': { 'relax.methods.sphere.GSConfig': ('methods/sphere.html#gsconfig', 'relax/methods/sphere.py'),
                                      'relax.methods.sphere.GrowingSphere': ( 'methods/sphere.html#growingsphere',
                                                                              'relax/methods/sphere.py'),
                                      'relax.methods.sphere.GrowingSphere.__init__': ( 'methods/sphere.html#growingsphere.__init__',
                                                                                       'relax/methods/sphere.py'),
                                      'relax.methods.sphere.GrowingSphere.before_generate_cf': ( 'methods/sphere.html#growingsphere.before_generate_cf',
                                                                                                 'relax/methods/sphere.py'),
                                      'relax.methods.sphere.GrowingSphere.generate_cf': ( 'methods/sphere.html#growingsphere.generate_cf',
                                                                                          'relax/methods/sphere.py'),
                                      'relax.methods.sphere._growing_spheres': ( 'methods/sphere.html#_growing_spheres',
                                                                                 'relax/methods/sphere.py'),
                                      'relax.methods.sphere.default_perturb_function': ( 'methods/sphere.html#default_perturb_function',
                                                                                         'relax/methods/sphere.py'),
                                      'relax.methods.sphere.hyper_sphere_coordindates': ( 'methods/sphere.html#hyper_sphere_coordindates',
                                                                                          'relax/methods/sphere.py'),
                                      'relax.methods.sphere.perturb_function_with_features': ( 'methods/sphere.html#perturb_function_with_features',
                                                                                               'relax/methods/sphere.py'),
                                      'relax.methods.sphere.sample_categorical': ( 'methods/sphere.html#sample_categorical',
                                                                                   'relax/methods/sphere.py')},
            'relax.methods.vanilla': { 'relax.methods.vanilla.VanillaCF': ('methods/vanilla.html#vanillacf', 'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCF.__init__': ( 'methods/vanilla.html#vanillacf.__init__',
                                                                                     'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCF.generate_cf': ( 'methods/vanilla.html#vanillacf.generate_cf',
                                                                                        'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCFConfig': ( 'methods/vanilla.html#vanillacfconfig',
                                                                                  'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla._vanilla_cf': ( 'methods/vanilla.html#_vanilla_cf',
                                                                              'relax/methods/vanilla.py')},
            'relax.ml_model': { 'relax.ml_model.AutoEncoder': ('ml_model.html#autoencoder', 'relax/ml_model.py'),
                                'relax.ml_model.AutoEncoder.__init__': ('ml_model.html#autoencoder.__init__', 'relax/ml_model.py'),
                                'relax.ml_model.AutoEncoder.call': ('ml_model.html#autoencoder.call', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule': ('ml_model.html#mlmodule', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.__init__': ('ml_model.html#mlmodule.__init__', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule._init_model': ('ml_model.html#mlmodule._init_model', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.is_trained': ('ml_model.html#mlmodule.is_trained', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.load_from_path': ('ml_model.html#mlmodule.load_from_path', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.pred_fn': ('ml_model.html#mlmodule.pred_fn', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.save': ('ml_model.html#mlmodule.save', 'relax/ml_model.py'),
                                'relax.ml_model.MLModule.train': ('ml_model.html#mlmodule.train', 'relax/ml_model.py'),
                                'relax.ml_model.MLModuleConfig': ('ml_model.html#mlmoduleconfig', 'relax/ml_model.py'),
                                'relax.ml_model.MLP': ('ml_model.html#mlp', 'relax/ml_model.py'),
                                'relax.ml_model.MLP.__init__': ('ml_model.html#mlp.__init__', 'relax/ml_model.py'),
                                'relax.ml_model.MLP.call': ('ml_model.html#mlp.call', 'relax/ml_model.py'),
                                'relax.ml_model.MLP.get_config': ('ml_model.html#mlp.get_config', 'relax/ml_model.py'),
                                'relax.ml_model.MLPBlock': ('ml_model.html#mlpblock', 'relax/ml_model.py'),
                                'relax.ml_model.MLPBlock.__init__': ('ml_model.html#mlpblock.__init__', 'relax/ml_model.py'),
                                'relax.ml_model.MLPBlock.build': ('ml_model.html#mlpblock.build', 'relax/ml_model.py'),
                                'relax.ml_model.MLPBlock.call': ('ml_model.html#mlpblock.call', 'relax/ml_model.py'),
                                'relax.ml_model.download_ml_module': ('ml_model.html#download_ml_module', 'relax/ml_model.py'),
                                'relax.ml_model.load_ml_module': ('ml_model.html#load_ml_module', 'relax/ml_model.py')},
            'relax.strategy': { 'relax.strategy.BaseStrategy': ('explain.strategy.html#basestrategy', 'relax/strategy.py'),
                                'relax.strategy.BaseStrategy.__call__': ( 'explain.strategy.html#basestrategy.__call__',
                                                                          'relax/strategy.py'),
                                'relax.strategy.BatchedPmapStrategy': ('explain.strategy.html#batchedpmapstrategy', 'relax/strategy.py'),
                                'relax.strategy.BatchedPmapStrategy.__call__': ( 'explain.strategy.html#batchedpmapstrategy.__call__',
                                                                                 'relax/strategy.py'),
                                'relax.strategy.BatchedPmapStrategy.__init__': ( 'explain.strategy.html#batchedpmapstrategy.__init__',
                                                                                 'relax/strategy.py'),
                                'relax.strategy.BatchedVmapStrategy': ('explain.strategy.html#batchedvmapstrategy', 'relax/strategy.py'),
                                'relax.strategy.BatchedVmapStrategy.__call__': ( 'explain.strategy.html#batchedvmapstrategy.__call__',
                                                                                 'relax/strategy.py'),
                                'relax.strategy.BatchedVmapStrategy.__init__': ( 'explain.strategy.html#batchedvmapstrategy.__init__',
                                                                                 'relax/strategy.py'),
                                'relax.strategy.IterativeStrategy': ('explain.strategy.html#iterativestrategy', 'relax/strategy.py'),
                                'relax.strategy.IterativeStrategy.__call__': ( 'explain.strategy.html#iterativestrategy.__call__',
                                                                               'relax/strategy.py'),
                                'relax.strategy.PmapStrategy': ('explain.strategy.html#pmapstrategy', 'relax/strategy.py'),
                                'relax.strategy.PmapStrategy.__call__': ( 'explain.strategy.html#pmapstrategy.__call__',
                                                                          'relax/strategy.py'),
                                'relax.strategy.PmapStrategy.__init__': ( 'explain.strategy.html#pmapstrategy.__init__',
                                                                          'relax/strategy.py'),
                                'relax.strategy.StrategyFactory': ('explain.strategy.html#strategyfactory', 'relax/strategy.py'),
                                'relax.strategy.StrategyFactory.__init__': ( 'explain.strategy.html#strategyfactory.__init__',
                                                                             'relax/strategy.py'),
                                'relax.strategy.StrategyFactory.get_default_strategy': ( 'explain.strategy.html#strategyfactory.get_default_strategy',
                                                                                         'relax/strategy.py'),
                                'relax.strategy.StrategyFactory.get_strategy': ( 'explain.strategy.html#strategyfactory.get_strategy',
                                                                                 'relax/strategy.py'),
                                'relax.strategy.VmapStrategy': ('explain.strategy.html#vmapstrategy', 'relax/strategy.py'),
                                'relax.strategy.VmapStrategy.__call__': ( 'explain.strategy.html#vmapstrategy.__call__',
                                                                          'relax/strategy.py'),
                                'relax.strategy._batched_generation': ('explain.strategy.html#_batched_generation', 'relax/strategy.py'),
                                'relax.strategy._pad_divisible_X': ('explain.strategy.html#_pad_divisible_x', 'relax/strategy.py')},
            'relax.utils': { 'relax.utils.Config': ('utils.html#config', 'relax/utils.py'),
                             'relax.utils.Config.default': ('utils.html#config.default', 'relax/utils.py'),
                             'relax.utils._is_array': ('utils.html#_is_array', 'relax/utils.py'),
                             'relax.utils._reshape_x': ('utils.html#_reshape_x', 'relax/utils.py'),
                             'relax.utils.auto_reshaping': ('utils.html#auto_reshaping', 'relax/utils.py'),
                             'relax.utils.get_config': ('utils.html#get_config', 'relax/utils.py'),
                             'relax.utils.grad_update': ('utils.html#grad_update', 'relax/utils.py'),
                             'relax.utils.load_json': ('utils.html#load_json', 'relax/utils.py'),
                             'relax.utils.load_pytree': ('utils.html#load_pytree', 'relax/utils.py'),
                             'relax.utils.save_pytree': ('utils.html#save_pytree', 'relax/utils.py'),
                             'relax.utils.validate_configs': ('utils.html#validate_configs', 'relax/utils.py')}}}
