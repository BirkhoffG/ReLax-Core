# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/methods/00_base.ipynb.

# %% auto 0
__all__ = ['default_apply_constraints_fn', 'default_compute_reg_loss_fn', 'CFModule', 'ParametricCFModule']

# %% ../../nbs/methods/00_base.ipynb 1
from ..import_essentials import *
from ..base import BaseConfig, BaseModule, PredFnMixedin, TrainableMixedin

# %% ../../nbs/methods/00_base.ipynb 2
def default_apply_constraints_fn(x, cf, hard, **kwargs):
    return cf

def default_compute_reg_loss_fn(x, cf, **kwargs):
    return 0.

# %% ../../nbs/methods/00_base.ipynb 3
class CFModule(BaseModule):
    """Base class for all counterfactual modules."""

    def __init__(
        self, 
        config,
        *, 
        name: str = None,
        apply_constraints_fn = None,
        compute_reg_loss_fn = None
    ):
        super().__init__(config, name=name)
        self.apply_constraints_fn = apply_constraints_fn
        self.compute_reg_loss_fn = compute_reg_loss_fn

    def init_fns(
        self,
        apply_constraints_fn = None,
        compute_reg_loss_fn = None
    ):
        if self.apply_constraints_fn is None and apply_constraints_fn is not None:
            self.apply_constraints_fn = apply_constraints_fn
        else:
            self.apply_constraints_fn = default_apply_constraints_fn
        if self.compute_reg_loss_fn is None and compute_reg_loss_fn is not None:
            self.compute_reg_loss_fn = compute_reg_loss_fn
        else:
            self.compute_reg_loss_fn = default_compute_reg_loss_fn
    
    def apply_constraints(self, *args, **kwargs):
        if self.apply_constraints_fn is not None:
            self.apply_constraints_fn(*args, **kwargs)
    
    def compute_reg_loss(self, *args, **kwargs):
        if self.compute_reg_loss_fn is not None:
            self.compute_reg_loss_fn(*args, **kwargs)

    def generate_cf(
        self,
        x: Array,
        pred_fn: Callable = None,
        pred_fn_args: Dict = None,
    ) -> Array: # Return counterfactual of x.
        raise NotImplementedError

# %% ../../nbs/methods/00_base.ipynb 4
class ParametricCFModule(CFModule, TrainableMixedin):
    """Base class for parametric counterfactual modules."""
    pass
